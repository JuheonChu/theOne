/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.57
 * Generated at: 2020-10-21 18:30:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.admin;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.project.service.*;
import com.project.vo.*;
import java.util.*;

public final class approve_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(3);
    _jspx_dependants.put("jar:file:/C:/apache-tomcat-8.5.57/wtpwebapps/theOne/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("jar:file:/C:/apache-tomcat-8.5.57/wtpwebapps/theOne/WEB-INF/lib/jstl-1.2.jar!/META-INF/c-1_0.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1600329454716L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_packages.add("com.project.service");
    _jspx_imports_packages.add("com.project.vo");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("<!-- Web에서 처음 favicon 404에러 막아주는코드 -->\r\n");
      out.write("<link rel=\"shortcut icon\" href=\"#\">\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("\thref=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("\r\n");
      out.write("<script src=\"");
      if (_jspx_meth_c_005furl_005f0(_jspx_page_context))
        return;
      out.write("\"></script>\r\n");
      out.write("<script src=\"");
      if (_jspx_meth_c_005furl_005f1(_jspx_page_context))
        return;
      out.write("\"></script>\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.5.1.js\"\r\n");
      out.write("\tintegrity=\"sha256-QWo7LDvxbWT2tbbQ97B53yJnYU3WhH/C8ycbRAkjPDc=\"\r\n");
      out.write("\tcrossorigin=\"anonymous\"></script>\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("table {\r\n");
      out.write("\tborder-collapse: collapse;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("th {\r\n");
      out.write("\tborder: 1px solid black;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("td {\r\n");
      out.write("\tborder: 1px solid black;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\tvar socket = null;\r\n");
      out.write("\tvar isStomp = false;\r\n");
      out.write("\t\r\n");
      out.write("\r\n");
      out.write("\t$(document).ready(function() {\r\n");
      out.write("\t\t\tconnectStomp();\r\n");
      out.write("\t\t\t\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t$(\".approve\").click(function(event) {\r\n");
      out.write("\t\t\t\t\t\t\tevent.preventDefault();\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\tif (!isStomp && socket.readyState != 1)\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\treturn;\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tvar msg = $(this).parent().find(\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\"input#messagecontent\")\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t.val();\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tvar fromId = $(this).parent().find(\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t\"input#fromId\").val();\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tvar receiver = $(this).parent()\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t.find(\"input#receiver\")\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t.val();\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tvar contractno = $(this).parent()\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t.find(\"input#contractno\")\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t\t.val();\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tvar message = {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tfromId : fromId,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\treceiver : receiver,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tmessagecontent : msg,\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\ttopic : '필수',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tcontractno : contractno\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t};\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\tif (isStomp) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\talert(\"승인완료!\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tsocket.send('/app/stompTest', {topic : '필수'}, JSON.stringify(message));\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\tsocket.send(msg);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t});\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t$(\".finalApproval\").click(function(event) {\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\tvar selectmenu = $(this).parent().find(\"input#selectmenu\").val();\r\n");
      out.write("\t\t\t\t\t\t\tvar postcode = $(this).parent().find(\"input#postcode\").val();\r\n");
      out.write("\t\t\t\t\t\t\tvar address = $(this).parent().find(\"input#address\").val();\r\n");
      out.write("\t\t\t\t\t\t\tvar membershipmaintenance = $(this).parent().find(\"input#membershipmaintenance\").val();\r\n");
      out.write("\t\t\t\t\t\t\tvar membershipfee = $(this).parent().find(\"input#membershipfee\").val();\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\tif (!selectmenu || !postcode || !address || (membershipmaintenance == 0) || (membershipfee == 0)) {\r\n");
      out.write("\t\t\t\t\t\t\t\talert('최종승인을 할수없습니다!');\r\n");
      out.write("\t\t\t\t\t\t\t\treturn;\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\tvar warn = confirm(\"해당 창업주의 가맹 창업을 승인하시겠습니까??\");\r\n");
      out.write("\t\t\t\t\t\t\tif (warn) {\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t//$(this).prop('value', '승인됨');\r\n");
      out.write("\t\t\t\t\t\t\t\tvar approve =  $(this).prop('value');\r\n");
      out.write("\t\t\t\t\t\t\t//\t$(this).prop('disabled', true);\r\n");
      out.write("\t\t\t\t\t\t\t\t//var disable = $(this).prop('disable');\r\n");
      out.write("\t\t\t\t\t\t\t\tvar contractno = $(this).parent().find(\"input#contractno\").val();\r\n");
      out.write("\t\t\t\t\t\t\t\tvar status = $(this).parent().find(\"input#status\").val();\r\n");
      out.write("\t\t\t\t\t\t\t\tvar data = {\r\n");
      out.write("\t\t\t\t\t\t\t\t\tapprove: approve,\r\n");
      out.write("\t\t\t\t\t\t\t\t\tcontractno: contractno,\r\n");
      out.write("\t\t\t\t\t\t\t\t\tstatus:status\r\n");
      out.write("\t\t\t\t\t\t\t\t};\r\n");
      out.write("\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t\t\t\t\t\turl : 'http://localhost:8080/rest2/vo/approveBusiness.do',\r\n");
      out.write("\t\t\t\t\t\t\t\t\tdata : JSON.stringify(data),\r\n");
      out.write("\t\t\t\t\t\t\t\t\tdataType:'json',\r\n");
      out.write("\t\t\t\t\t\t\t\t\tcache : false,\r\n");
      out.write("\t\t\t\t\t\t\t\t\tasync : true,\r\n");
      out.write("\t\t\t\t\t\t\t\t\tcontentType:\"application/json\", \r\n");
      out.write("\t\t\t\t\t\t\t\t\ttype : \"post\",\r\n");
      out.write("\t\t\t\t\t\t\t\t\tsuccess : function(response){\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\talert(\"response! : \" + response.approve);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t$(this).prop('value', response.approve);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t$(this).prop('disabled', response.disabled);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tvar ajaxName = decodeURIComponent(response.ajaxName);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t},\r\n");
      out.write("\t\t\t\t\t\t\t\t\terror : function(xhr,status,error) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\talert(\"에러!\");\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\talert(\"code:\"+ xhr.status+ \"\\n\"+ \"message:\" + xhr.responseText+ \"\\n\"+ \"error:\"+ error);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\t}else {\r\n");
      out.write("\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t\tevent.preventDefault();\r\n");
      out.write("\t\t\t\t\t\t\t\r\n");
      out.write("\t\t\t\t\t\t    if (!isStomp && socket.readyState != 1)return;\r\n");
      out.write("\t\t\t\t\t\t\tvar msg = $(this).parent().find(\"input#messagecontent\").val();\r\n");
      out.write("\t\t\t\t\t\t\tvar fromId = $(this).parent().find(\"input#fromId\").val();\r\n");
      out.write("\t\t\t\t\t\t\tvar receiver = $(this).parent().find(\"input#receiver\").val();\r\n");
      out.write("\t\t\t\t\t\t\tvar contractno = $(this).parent().find(\"input#contractno\").val();\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\tvar message = {\r\n");
      out.write("\t\t\t\t\t\t\t\tfromId : fromId,\r\n");
      out.write("\t\t\t\t\t\t\t\treceiver : receiver,\r\n");
      out.write("\t\t\t\t\t\t\t\tmessagecontent : msg,\r\n");
      out.write("\t\t\t\t\t\t\t\ttopic : '승인완료',\r\n");
      out.write("\t\t\t\t\t\t\t\tcontractno : contractno\r\n");
      out.write("\t\t\t\t\t\t\t};\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\tif (isStomp) {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\talert(\"승인완료!\");\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tsocket.send('/app/stompTest/finalApproval',\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\t\t{}, JSON.stringify(message));\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\t} else {\r\n");
      out.write("\t\t\t\t\t\t\t\t\t\tsocket.send(msg);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t}\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t\tlocalStorage.setItem('approve', approve);\r\n");
      out.write("\t\t\t\t\t\t\t\t\t//var temp = localStorage.getItem(\"approve\");\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t\t\t\t});\r\n");
      out.write("\t\t\t\t\t\t\r\n");
      out.write("\r\n");
      out.write("\t\t\t\t\t});\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("\tfunction connectStomp() {\r\n");
      out.write("\t\tvar sock = new SockJS(\"/stompTest\"); //end point\r\n");
      out.write("\t\tvar client = Stomp.over(sock);\r\n");
      out.write("\r\n");
      out.write("\t\tisStomp = true;\r\n");
      out.write("\t\tsocket = client;\r\n");
      out.write("\r\n");
      out.write("\t\tclient.connect({}, function() {\r\n");
      out.write("\t\t\tconsole.log(\"Connected StompTest!!!!!\");\r\n");
      out.write("\t\t\t//Controller에서의 MessageMapping, header, message(자유형식)\r\n");
      out.write("\t\t\tclient.send('/TTT', {}, \"연결됩니다...\"); //컨트롤러 매핑주소\r\n");
      out.write("\r\n");
      out.write("\t\t\t//해당 토픽을 구독한다.\r\n");
      out.write("\t\t\tclient.subscribe('/topic/message', function(event) {\r\n");
      out.write("\t\t\t\tconsole.log(\"!!!!!!!!!evt: \" + event);\r\n");
      out.write("\t\t\t});\r\n");
      out.write("\t\t});\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t");

		List<TempVO> waitinglist = (List<TempVO>) request.getAttribute("waitinglist");
		MemberService memberService = (MemberService) request.getAttribute("memberService");
		//how to bring the idx of members
		List<MemberVO>members  = memberService.selectAll();
		String disable = (String)request.getAttribute("disable");
	
      out.write("\r\n");
      out.write("\t<table class=\"table\">\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<th>계약체결 번호</th>\r\n");
      out.write("\t\t\t<th>국내/해외</th>\r\n");
      out.write("\t\t\t<th>브랜드</th>\r\n");
      out.write("\t\t\t<th>가맹위치</th>\r\n");
      out.write("\t\t\t<th>가맹 신청인</th>\r\n");
      out.write("\t\t\t<th>신청인 연락처</th>\r\n");
      out.write("\t\t\t<th>신청인 이메일</th>\r\n");
      out.write("\t\t\t<th>신청인 약관동의 여부</th>\r\n");
      out.write("\t\t\t<th>가맹비</th>\r\n");
      out.write("\t\t\t<th>가맹 유지비</th>\r\n");
      out.write("\t\t\t<th>가맹주 선택메뉴</th>\r\n");
      out.write("\t\t\t<th>가맹주 가맹점 주소</th>\r\n");
      out.write("\t\t\t<th>가맹점 우편번호</th>\r\n");
      out.write("\t\t\t<th>가맹주 창업세부절차</th>\r\n");
      out.write("\t\t\t<th>최종승인</th>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\r\n");
      out.write("\t\t");

			for (int i = 0; i < waitinglist.size(); i++) {
			TempVO vo = waitinglist.get(i);
			String receiverId = null;
		try{
			//receiverId = memberService.findIdByName(vo.getName(), vo.getBrand());// where the issue evokes.... member테이블에서 idx도 가져올수있어야함.
			receiverId = memberService.findIdByIdx(vo.getMember_index());
		
		}catch(Exception e){
      out.write("\r\n");
      out.write("\t\t\t<script>alert(\"중복회원 가입불가!\");</script>\r\n");
      out.write("\t\t");
}
		
      out.write("\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td>");
      out.print(vo.getContractno());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(vo.getStartup_field());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(vo.getBrand());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(vo.getLocation());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(vo.getName());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(vo.getPhone());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(vo.getEmail());
      out.write("</td>\r\n");
      out.write("\r\n");
      out.write("\t\t\t");

				if ("checkedValue".equals(vo.getConsent())) {
			
      out.write("\r\n");
      out.write("\t\t\t<td>O</td>\r\n");
      out.write("\t\t\t");

				} else {
			
      out.write("\r\n");
      out.write("\t\t\t<td>X</td>\r\n");
      out.write("\t\t\t");

				}
			
      out.write("\r\n");
      out.write("\t\t\t<td>");
      out.print(vo.getMembershipfee() + "원");
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(vo.getMembershipmaintenance() + "원");
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(vo.getSelectmenu());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print((vo.getAddress() == null ? null : vo.getAddress() + " " + vo.getDetailaddress()));
      out.write("</td>\r\n");
      out.write("\t\t\t<td>");
      out.print(vo.getPostcode());
      out.write("</td>\r\n");
      out.write("\t\t\t<td>\r\n");
      out.write("\t\t\t\t<input id=\"contractno\" name=\"contractno\" type=\"hidden\" value=\"");
      out.print(vo.getContractno());
      out.write("\"> \r\n");
      out.write("\t\t\t\t<input id=\"fromId\" name=\"fromId\" type=\"hidden\" value=\"");
      out.print(session.getAttribute("userid"));
      out.write("\"> \r\n");
      out.write("\t\t\t\t<input id=\"receiver\" name=\"receiver\" type=\"hidden\" value=\"");
      out.print(receiverId);
      out.write("\">\r\n");
      out.write("\t\t\t\t<input id=\"messagecontent\" name=\"receiver\" type=\"hidden\" value=\"");
      out.print(vo.getName());
      out.write("님 상담문의가 승인되었습니다.자세한 내용은  여기를 클릭해주세요\">\r\n");
      out.write("\t\t\t\t<input type=\"button\" value=\"승인하기\" class=\"approve\" onclick=\"\">\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t\t<td>\r\n");
      out.write("\t\t\t\t<input id = \"selectmenu\" name = \"selectmenu\" value = ");
      out.print( vo.getSelectmenu() );
      out.write(" type = \"hidden\"/>\r\n");
      out.write("\t\t\t\t<input id = \"postcode\" name = \"postcode\" value = \"");
      out.print( vo.getPostcode() );
      out.write("\" type = \"hidden\"/>\r\n");
      out.write("\t\t\t\t<input id = \"address\" name = \"address\" value = \"");
      out.print(vo.getAddress());
      out.write("\" type = \"hidden\"/>\r\n");
      out.write("\t\t\t\t<input id = \"membershipmaintenance\" name = \"membershipmaintenance\" value = \"");
      out.print( vo.getMembershipmaintenance());
      out.write("\" type = \"hidden\"/>\r\n");
      out.write("\t\t\t\t<input id = \"membershipfee\" name = \"membershipfee\" value = \"");
      out.print( vo.getMembershipfee());
      out.write("\" type = \"hidden\"/>\r\n");
      out.write("\t\t\t\t<input id=\"contractno\" name=\"contractno\" type=\"hidden\" value=\"");
      out.print(vo.getContractno());
      out.write("\"/> \r\n");
      out.write("\t\t\t\t<input id=\"fromId\" name=\"fromId\" type=\"hidden\" value=\"");
      out.print(session.getAttribute("userid"));
      out.write("\"/>\r\n");
      out.write("\t\t\t\t<input id=\"receiver\" name=\"receiver\" type=\"hidden\" value=\"");
      out.print(receiverId);
      out.write("\"/>\r\n");
      out.write("\t\t\t\t<input id=\"messagecontent\" name=\"receiver\" type=\"hidden\" value=\"");
      out.print(vo.getName());
      out.write("님   최종승인되었습니다.자세한 내용은  여기를 클릭해주세요\"/>\r\n");
      out.write("\t\t\t\t<input id = \"status\" name = \"status\" type = \"hidden\" value = \"");
      out.print(vo.getStatus() );
      out.write("\" />\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t");
if(vo.getStatus().equals("approved")){ 
      out.write("\r\n");
      out.write("\t\t\t\t\t<input type=\"button\" value=\"");
      out.print(vo.getStatus());
      out.write("\" class=\"finalApproval\" style=\"border: none;\" disabled=\"true\"/>\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t");
}else{ 
      out.write("\r\n");
      out.write("\t\t\t\t\t<input type=\"button\" value=\"");
      out.print(vo.getStatus());
      out.write("\" class=\"finalApproval\" style=\"border: none;\"/>\r\n");
      out.write("\t\t\t\t");
} 
      out.write("\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t");

			}
		
      out.write("\r\n");
      out.write("\t</table>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<input type=\"hidden\" id=\"message\" value=\"\">\r\n");
      out.write("\r\n");
      out.write("\t<div class=\"row\">\r\n");
      out.write("\t\t<div class=\"col-sm-12\">\r\n");
      out.write("\t\t\t<input type=\"text\" id=\"user-name\" />\r\n");
      out.write("\t\t\t<button class=\"btn btn-default\">전송</button>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\r\n");
      out.write("\t</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005furl_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:url
    org.apache.taglibs.standard.tag.rt.core.UrlTag _jspx_th_c_005furl_005f0 = (org.apache.taglibs.standard.tag.rt.core.UrlTag) _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.UrlTag.class);
    boolean _jspx_th_c_005furl_005f0_reused = false;
    try {
      _jspx_th_c_005furl_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005furl_005f0.setParent(null);
      // /WEB-INF/views/admin/approve.jsp(20,13) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005furl_005f0.setValue("/resources/js/sockjs-0.3.4.js");
      int _jspx_eval_c_005furl_005f0 = _jspx_th_c_005furl_005f0.doStartTag();
      if (_jspx_th_c_005furl_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005furl_005f0);
      _jspx_th_c_005furl_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005furl_005f0, _jsp_getInstanceManager(), _jspx_th_c_005furl_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005furl_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:url
    org.apache.taglibs.standard.tag.rt.core.UrlTag _jspx_th_c_005furl_005f1 = (org.apache.taglibs.standard.tag.rt.core.UrlTag) _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.get(org.apache.taglibs.standard.tag.rt.core.UrlTag.class);
    boolean _jspx_th_c_005furl_005f1_reused = false;
    try {
      _jspx_th_c_005furl_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005furl_005f1.setParent(null);
      // /WEB-INF/views/admin/approve.jsp(21,13) name = value type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005furl_005f1.setValue("/resources/js/stomp.js");
      int _jspx_eval_c_005furl_005f1 = _jspx_th_c_005furl_005f1.doStartTag();
      if (_jspx_th_c_005furl_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005furl_0026_005fvalue_005fnobody.reuse(_jspx_th_c_005furl_005f1);
      _jspx_th_c_005furl_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005furl_005f1, _jsp_getInstanceManager(), _jspx_th_c_005furl_005f1_reused);
    }
    return false;
  }
}
